🎯This is the starting of my DSA journey.

▶️▶️DATA STRUCTURE
👉Why DS?
Data structure is simply a way to store and organize information appropriately ,
so that it can be used efficiently.

👉Advantages of DS:
1) Easier processing of data.
2) Efficient functioning of computer software since the data is stored in an efficient way.

👉Categories of DS(based on how they can be accessed):
1️⃣ Linear DS: These DS can be accessed sequentially by visiting each element in the
array and commonly referred to as PASSOVER.
example: Arrays,LL,Stack,Queue.
2️⃣ Non-Linear DS: These DS stores the data in sorted way where there is a relationship
between elements.We can't access the data sequentially but accessing the data requires
ADVANCING and BACKTRACKING over the bits of data.
example: Tress and Graph

👉Categories of DS(based on how they can be stored):
1️⃣ Linear DS: Elements are stored consecutively in the memory.
example: Arrays
2️⃣ Non-Linear DS: Elements are stored randomly and each bit of data has a pointer location
of the next element.
example: LinkedLists
Everything else is depends upon the impl.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

▶️▶️ALGORITHMS
Series of well defined steps to solve a particular problem (set of instructions)
example :Face detection , Page ranking

👉Pseudocode is a language that allows us humans to specify and describe how a computer
programs works in a way that is both interpreted by us, and translatable into code.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
▶️▶️Complexity: defines how good an algorithm actually is.
Complexity can be calculated by counting the number of basic operations as a function of the size
of the input we then simplify the expression  and look at the most significant factor.

👉Time Complexity: Quantifies the runtime of the algorithm.
    ❌Time complexity != Time Taken (machine dependent)
    ✅Time Complexity can be defined as the rate at which the time taken increases with
       respect to the input size.
       👉Big-oh Notation is used. => O(No.of steps taken by the program)
       👉Three rules for calculating the no.of steps.
            1️⃣ To be computed in worst case scenario.
                👉Best case => Least number of operations.
                👉Worst case => Maximum number of steps taken.
            2️⃣ Avoid the constants.
                👉Imagine the time complexity of our program is : O( 4n^3 + 3n^2 + 8)
                👉 n = 10^5.
                👉Then the complexity becomes = O ( 4x10^15 + 3x10^10 + 8).
                👉Now this 4x10^15 + 3x10^10 is such a big operation that the 8 does not
                  holds any significance.

            3️⃣ Avoid lower values.


👉Space Complexity:



